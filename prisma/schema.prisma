// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
  mentor

  @@map("roles")
}

model User {
  id                 Int            @id @default(autoincrement())
  username           String
  email              String         @unique
  password           String
  resetPasswordToken String?        @map("reset_password_token")
  verificationToken  String?        @map("verification_token")
  role               Role
  profile            Profile?
  notification       Notification[]
  review             Review[]
  transaction        Transaction[]
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")

  @@map("users")
}

model Profile {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String?
  picture   String?
  city      String?
  province  String?
  country   String?
  userId    Int      @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("profiles")
}

model Notification {
  id      Int      @id @default(autoincrement())
  message String
  time    DateTime @default(now())
  isRead  Boolean
  userId  Int
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("notifications")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  course    Course[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

enum Level {
  beginner
  intermediate
  advanced

  @@map("levels")
}

model Course {
  id          Int           @id @default(autoincrement())
  name        String
  courseCode  String        @map("course_code")
  isPremium   Boolean       @map("is_premium")
  categoryId  Int           @map("category_id")
  level       Level
  price       Int
  description String?
  videoUrl    String        @map("video_url")
  Transaction Transaction[]
  review      Review[]
  category    Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  @@map("courses")
}

model PaymentMethod {
  id          Int           @id @default(autoincrement())
  name        String
  Transaction Transaction[]
  createdAt   DateTime      @default(now()) @map("crated_at")
  updatedAt   DateTime      @updatedAt

  @@map("payment_method")
}

model Transaction {
  id              Int           @id @default(autoincrement())
  userId          Int           @map("user_id")
  courseId        Int           @map("course_id")
  paymentMethodId Int           @map("payment_method_id")
  totalHarga      Float         @map("total_harga")
  paymentStatus   Boolean
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("transactions")
}

model Review {
  id        Int      @id @default(autoincrement())
  nilai     Float?
  feedback  String?
  userId    Int
  courseId  Int
  rantingId Int?
  date      DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  ranting   Ranting? @relation(fields: [rantingId], references: [id], onDelete: SetNull)

  @@map("reviews")
}

model Ranting {
  id           Int      @id
  totalRanting Float?   @map("total_ranting")
  reviews      Review[]
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("rantings")
}
